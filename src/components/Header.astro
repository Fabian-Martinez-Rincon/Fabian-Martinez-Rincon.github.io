---

const navItems = [
  {
    title: "Inicio",
    label: "inicio",
    url: "/",
  },
  {
    title: "📚Facultad",
    label: "facultad",
    url: "/tags/facultad",
  },
  {
    title: "🐧Linux",
    label: "linux",
    url: "/tags/linux",
  },
  {
    title: "🐍Python",
    label: "python",
    url: "/tags/python",
  },
  {
    title: "Proyectos",
    label: "proyectos",
    url: "/tags/proyectos",
  },
  {
    title: "Otros",
    label: "Otros",
    url: "/otros",
  },
  {
    title: "Curriculum",
    label: "Curriculum",
    url: "/resumeES",
  },
]
---

<header
  class="fixed top-0 left-0 right-0  flex items-center justify-between mx-auto mt-5 gap-x-2 border-4 border-black rounded-2xl  bg-stone-900 px-12 shadow-md w-fit z-[9999] ">
  <nav class="flex px-3 text-sm font-bold rounded-full text-white justify-center items-center">
    {navItems.map((link) => (
        <a
          class="relative block px-2 py-2 transition hover:text-yellow-500 text-white"
          aria-label={link.label}
          href={link.url}
        >
          {link.title}
        </a>
      ))
    }
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navLinks = Array.from(document.querySelectorAll("header nav a"));
    const linkMap = new Map();

    navLinks.forEach((link) => {
      const label:any = link.getAttribute("aria-label");
      const section = document.getElementById(label);
      if (section) linkMap.set(section, link);
    });

    const callback = (entries:any) => {
      entries.forEach((entry:any) => {
        const link = linkMap.get(entry.target);
        if (link && entry.isIntersecting) {
          navLinks.forEach((item) => item.classList.remove("text-yellow-500"));
          link.classList.add("text-yellow-500");
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => observer.observe(section));

    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => observer.observe(section));
      }
    };
  });
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }
</style>
